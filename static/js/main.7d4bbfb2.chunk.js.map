{"version":3,"sources":["components/api.js","components/CurrentUser/CurrentUser.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getUser","userID","fetch","then","person","json","CurrentUser","state","user","id","name","email","phone","getData","props","userId","setState","catch","this","prevProps","clear","className","type","onClick","React","Component","TodoList","prevId","value","sortBy","todo","setUser","selectedUserId","htmlFor","onChange","event","target","filter","elem","title","includes","sorted","completed","map","task","checked","readOnly","classNames","App","todos","clearSelectedUser","url","data","info","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7d4bbfb2.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = (url) => {\n  return fetch(`${BASE_URL}/${url}`)\n    .then(data => data);\n};\n\nexport const getUser = (userID) => fetch(`${BASE_URL}/users/${userID}`)\n  .then(person => person)\n  .then(person => person.json());\n","import React from 'react';\nimport { getUser } from '../api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n  clear: any,\n};\n\nexport class CurrentUser extends React.Component<Props> {\n  state = {\n    user: {\n      id: 0,\n      name: '',\n      email: '',\n      phone: '',\n    },\n  };\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  componentDidUpdate(prevProps: { userId: number; }) {\n    if (prevProps.userId !== this.props.userId) {\n      this.getData();\n    }\n  }\n\n  getData = () => {\n    getUser(this.props.userId)\n      .then(person => {\n        this.setState({ user: person });\n      })\n      .catch(() => {\n        this.setState({ user: null });\n      });\n  };\n\n  render() {\n    const { user } = this.state;\n    const { clear } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        {user ? (\n          <>\n            <button\n              type=\"button\"\n              onClick={clear}\n            >\n              Clear\n            </button>\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:\n                {user.id}\n              </span>\n            </h2>\n            <h3 className=\"CurrentUser__name\">\n              {user.name}\n            </h3>\n            <p className=\"CurrentUser__email\">\n              {user.email}\n            </p>\n            <p className=\"CurrentUser__phone\">\n              {user.phone}\n            </p>\n          </>\n        ) : 'NO DATA' }\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Task } from '../types/Task';\nimport './TodoList.scss';\n\ntype Props = {\n  todo: Task[],\n  setUser: any,\n  selectedUserId: number,\n};\n\nexport class TodoList extends React.Component<Props> {\n  state = {\n    prevId: 0,\n    value: '',\n    sortBy: 'All',\n  };\n\n  render() {\n    const { todo, setUser, selectedUserId } = this.props;\n    const { prevId, value, sortBy } = this.state;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div>\n          <label\n            htmlFor=\"sort_title\"\n          >\n            Filter\n            <input\n              id=\"sort_title\"\n              value={value}\n              onChange={(event) => {\n                this.setState({\n                  value: event.target.value,\n                });\n              }}\n              name=\"Sort by title\"\n            />\n          </label>\n        </div>\n\n        <select\n          onChange={(event) => {\n            this.setState({ sortBy: event.target.value });\n          }}\n        >\n          <option>All</option>\n\n          <option>Active</option>\n\n          <option>Completed</option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {\n              todo.filter((elem: Task) => {\n                const seach = elem.title ? elem.title : '';\n\n                return seach.includes(value);\n              }).filter((sorted: Task) => {\n                switch (sortBy) {\n                  case 'Active':\n                    return !sorted.completed;\n\n                  case 'Completed':\n                    return sorted.completed;\n\n                  default:\n                    return sorted;\n                }\n              }).map((task: Task) => {\n                return (\n                  <li\n                    key={task.id}\n                    className={\n                      `TodoList__item\n                  ${task.completed ? 'TodoList__item--checked' : 'TodoList__item--unchecked'}`\n                    }\n                  >\n                    <label>\n                      <input\n                        checked={task.completed}\n                        type=\"checkbox\"\n                        readOnly\n                      />\n                      <p>{task.title}</p>\n                    </label>\n\n                    <button\n                      className={classNames(\n                        'TodoList__user-button',\n                        'button',\n                        { 'TodoList__user-button--selected': (prevId === task.id && selectedUserId !== 0) },\n                      )}\n                      type=\"button\"\n                      onClick={() => {\n                        setUser(task.userId);\n                        this.setState({ prevId: task.id });\n                      }}\n                    >\n                      {`User #${task.userId}`}\n                    </button>\n                  </li>\n                );\n              })\n            }\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './components/api';\nimport { TodoList } from './components/TodoList';\nimport { Task } from './components/types/Task';\nimport './styles/general.scss';\nimport './App.scss';\n\ninterface State {\n  selectedUserId: number;\n  todos: Task[];\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  componentDidMount() {\n    getTodos('todos')\n      .then(info => info.json())\n      .then((data: Task[]) => {\n        this.setState({\n          todos: data,\n        });\n      });\n  }\n\n  setUser = (id: number) => {\n    this.setState({ selectedUserId: id });\n  };\n\n  clearSelectedUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {!!todos.length && (\n            <TodoList\n              selectedUserId={selectedUserId}\n              setUser={this.setUser}\n              todo={todos}\n            />\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clear={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}