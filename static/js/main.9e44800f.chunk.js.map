{"version":3,"sources":["components/api.js","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["getTodos","url","fetch","then","data","TodoList","state","prevId","value","sortBy","this","props","todo","setId","selectedUserId","className","htmlFor","id","onChange","event","setState","target","name","filter","elem","title","includes","sorted","completed","map","task","checked","type","readOnly","classNames","onClick","userId","React","Component","CurrentUser","user","email","phone","getDate","person","json","catch","prevProps","clear","App","todos","clearSelectedUser","info","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9e44800f.chunk.js","sourcesContent":["export const getTodos = (url) => {\n  const BASE_URL = 'https://mate.academy/students-api';\n\n  return fetch(`${BASE_URL}/${url}`)\n    .then(data => {\n      return data;\n    });\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\ninterface Task {\n  id: number,\n  userId: number,\n  title: string,\n  completed: boolean,\n}\n\ntype Props = {\n  todo: [],\n  setId: any,\n  selectedUserId: number,\n};\n\nexport class TodoList extends React.Component<Props> {\n  state = {\n    prevId: 0,\n    value: '',\n    sortBy: 'All',\n  };\n\n  render() {\n    const { todo, setId, selectedUserId } = this.props;\n    const { prevId, value, sortBy } = this.state;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div>\n          <label\n            htmlFor=\"sort_title\"\n          >\n            Filter\n            <input\n              id=\"sort_title\"\n              value={value}\n              onChange={(event) => {\n                this.setState({\n                  value: event.target.value,\n                });\n              }}\n              name=\"Sort by title\"\n            />\n          </label>\n        </div>\n\n        <select\n          onChange={(event) => {\n            this.setState({ sortBy: event.target.value });\n          }}\n        >\n          <option>All</option>\n\n          <option>Active</option>\n\n          <option>Completed</option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {\n              todo.filter((elem: Task) => {\n                const seach = elem.title ? elem.title : '';\n\n                return seach.includes(value);\n              }).filter((sorted: Task) => {\n                switch (sortBy) {\n                  case 'Active':\n                    return !sorted.completed;\n\n                  case 'Completed':\n                    return sorted.completed;\n\n                  default:\n                    return sorted;\n                }\n              }).map((task: Task) => {\n                return (\n                  <li\n                    key={task.id}\n                    className={\n                      `TodoList__item\n                  ${task.completed ? 'TodoList__item--checked' : 'TodoList__item--unchecked'}`\n                    }\n                  >\n                    <label>\n                      <input\n                        checked={task.completed}\n                        type=\"checkbox\"\n                        readOnly\n                      />\n                      <p>{task.title}</p>\n                    </label>\n\n                    <button\n                      className={classNames(\n                        'TodoList__user-button',\n                        'button',\n                        { 'TodoList__user-button--selected': (prevId === task.id && selectedUserId !== 0) },\n                      )}\n                      type=\"button\"\n                      onClick={() => {\n                        setId(task.userId);\n                        this.setState({ prevId: task.id });\n                      }}\n                    >\n                      {`User #${task.userId}`}\n                    </button>\n                  </li>\n                );\n              })\n            }\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { getTodos } from '../api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n  clear: any,\n};\n\nexport class CurrentUser extends React.Component<Props> {\n  state = {\n    user: {\n      id: 0,\n      name: '',\n      email: '',\n      phone: '',\n    },\n  };\n\n  componentDidMount() {\n    this.getDate();\n  }\n\n  componentDidUpdate(prevProps: { userId: number; }) {\n    if (prevProps.userId !== this.props.userId) {\n      this.getDate();\n    }\n  }\n\n  getDate = () => {\n    getTodos(`users/${this.props.userId}`)\n      .then((person) => person.json())\n      .then(person => {\n        this.setState({ user: person });\n      })\n      .catch(() => {\n        this.setState({ user: null });\n      });\n  };\n\n  render() {\n    const { user } = this.state;\n    const { clear } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        {user ? (\n          <>\n            <button\n              type=\"button\"\n              onClick={() => {\n                clear();\n              }}\n            >\n              Clear\n            </button>\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:\n                {user.id}\n              </span>\n            </h2>\n            <h3 className=\"CurrentUser__name\">\n              {user.name}\n            </h3>\n            <p className=\"CurrentUser__email\">\n              {user.email}\n            </p>\n            <p className=\"CurrentUser__phone\">\n              {user.phone}\n            </p>\n          </>\n        ) : 'NO DATA' }\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { getTodos } from './components/api';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\ninterface State {\n  selectedUserId: number;\n  todos: [];\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  componentDidMount() {\n    getTodos('todos')\n      .then(info => info.json())\n      .then((data: []) => {\n        this.setState({\n          todos: data,\n        });\n      });\n  }\n\n  setId = (id: number) => {\n    this.setState({ selectedUserId: id });\n  };\n\n  clearSelectedUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  // filteredResult = () => {\n  //   this.setState({\n  //     todos:\n  //   })\n  // };\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {todos.length > 0 && (\n            <TodoList selectedUserId={selectedUserId} setId={this.setId} todo={todos} />\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clear={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}